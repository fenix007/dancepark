<?php

namespace DancePark\EventBundle\Entity;

use DancePark\CommonBundle\Entity\DanceType;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    /**
     * {@inheritDoc}
     */
    public function findByEventDanceType(DanceType $type) {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder
            ->select("e")
            ->from("EventBundle:Event", "e")
            ->innerJoin('e.danceType', 'dt')
            ->where("dt.id = :danceType")
            ->setParameter("danceType", $type->getId());
        $events = $queryBuilder->getQuery()->getResult();

        return $events;
    }

    /**
     * Find by name like
     *
     * @param $name string
     */
    public function findByNameLike($name, $count = 15, $page = 0)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();

        try{
        $results = $queryBuilder
            ->select('e')
            ->from('EventBundle:Event', 'e')
            ->where('e.name LIKE :pattern')
            ->setParameter('pattern', '%' . $name . '%')
            ->setFirstResult($count * $page)
            ->setMaxResults($count)
            ->getQuery()
            ->getResult();
        } catch (NoResultException $e) {
            $results = array();
        }
        return $results;
    }

    /**
     * Find event ByDanceType
     *
     * @param $types
     * @param int $count
     * @param int $page
     */
    public function findByDanceTypes($types, $count = 15, $page = 0)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();

        try {
            $results = $queryBuilder
                ->select('e')
                ->from('EventBundle:Event', 'e')
                ->join('e.danceType', 'dt', 'WITH')
                ->where('dt.id IN (:types)')
                ->setParameter('types', $types)
                ->setMaxResults($count)
                ->setFirstResult($page * $count)
                ->getQuery()
                ->getResult();
        } catch (NoResultException $e) {
            $results = array();
        }
        return $results;
    }

    public function findByInfoLike($key, $count = 15, $page = 0)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();

        try{
            $results = $queryBuilder
                ->select('e')
                ->from('EventBundle:Event', 'e')
                ->where('e.infoColumn LIKE :pattern')
                ->setParameter('pattern', '%' . $key . '%')
                ->setFirstResult($count * $page)
                ->setMaxResults($count)
                ->getQuery()
                ->getResult();
        } catch (NoResultException $e) {
            $results = array();
        }
        return $results;
    }
}
